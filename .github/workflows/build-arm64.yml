name: ARM64 Image Builder

on:
  repository_dispatch:
    types: [build-arm64-image]
  workflow_dispatch:
    inputs:
      source_repo:
        description: 'Source repository (owner/repo)'
        required: true
        default: 'realstat-io/realstate-api'
      git_ref:
        description: 'Git reference (commit SHA, branch, or tag)'
        required: true
        default: 'main'
      image_tag:
        description: 'Image tag/version'
        required: true
        default: 'latest'
      dockerfile_path:
        description: 'Path to Dockerfile'
        required: false
        default: 'Dockerfile.api-server'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: realstat-io/realstate-api

jobs:
  build-arm64:
    name: Build ARM64 Images (Fast!)
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write

    steps:
    - name: ARM64 Build Started
      run: |
        echo "========================================="
        echo "ARM64 Image Build on Public Repo"
        echo "========================================="
        echo "Timestamp: $(date)"
        echo "Runner: ubuntu-24.04-arm (FREE ARM64!)"
        echo "Source: ${{ github.event.client_payload.source_repo || inputs.source_repo }}"
        echo "Git Ref: ${{ github.event.client_payload.git_ref || inputs.git_ref }}"
        echo "Image Tag: ${{ github.event.client_payload.image_tag || inputs.image_tag }}"
        echo "Dockerfile: ${{ github.event.client_payload.dockerfile_path || inputs.dockerfile_path }}"
        echo "Expected Time: ~2-3 minutes (vs 45 min on emulation!)"
        echo "========================================="

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/arm64

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.CROSS_REPO_TOKEN }}

    - name: Clone Source Repository
      run: |
        echo "Cloning source repository..."
        SOURCE_REPO="${{ github.event.client_payload.source_repo || inputs.source_repo }}"
        GIT_REF="${{ github.event.client_payload.git_ref || inputs.git_ref }}"
        
        # Clone with authentication for private repository
        if [ -z "${{ secrets.CROSS_REPO_TOKEN }}" ]; then
          echo "❌ CROSS_REPO_TOKEN secret not found!"
          echo "Please add the PAT to repository secrets: Settings → Secrets → Actions → New repository secret"
          echo "Name: CROSS_REPO_TOKEN"
          echo "Value: Your Personal Access Token with 'repo' and 'workflow' scopes"
          exit 1
        fi
        git clone https://x-access-token:${{ secrets.CROSS_REPO_TOKEN }}@github.com/${SOURCE_REPO}.git source-code
        cd source-code
        git checkout ${GIT_REF}
        
        echo "Cloned ${SOURCE_REPO} at ${GIT_REF}"
        echo "Commit info:"
        git log -1 --pretty=format:"  - Hash: %H%n  - Author: %an%n  - Date: %ad%n  - Message: %s" --date=short

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ github.event.client_payload.image_tag || inputs.image_tag }}
          type=raw,value=arm64-${{ github.event.client_payload.image_tag || inputs.image_tag }}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix=arm64-{{branch}}-

    - name: Build ARM64 Image (FAST!)
      uses: docker/build-push-action@v6
      with:
        context: ./source-code
        file: ./source-code/${{ github.event.client_payload.dockerfile_path || inputs.dockerfile_path }}
        push: true
        platforms: linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          GOPROXY=https://proxy.golang.org,direct
          GOSUMDB=sum.golang.org

    - name: ARM64 Build Complete
      run: |
        echo "========================================="
        echo "ARM64 Build Complete in Public Repo!"
        echo "========================================="
        echo "Images Built:"
        echo "${{ steps.meta.outputs.tags }}" | sed 's/^/  - /'
        echo ""
        echo "Architecture: linux/arm64 (Native, no emulation!)"
        echo "Build Time: Much faster than 45min emulated builds"
        echo "Cost: FREE (public repository ARM runners)"
        echo ""
        echo "Ready for deployment:"
        echo "  kubectl set image deployment/your-app container=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.client_payload.image_tag || inputs.image_tag }}"
        echo "========================================" 